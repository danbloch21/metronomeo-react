{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","reportWebVitals.js","index.js"],"names":["Metronome","props","playClick","state","count","beatsPerMeasure","click2","play","click1","setState","startStop","playing","clearInterval","timer","setInterval","bpm","handleBpmChange","event","target","value","Audio","this","className","type","min","max","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAe,G,MAAA,IAA0B,oCCA1B,MAA0B,mC,OCsG1BA,E,kDA/FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,UAAY,WACV,MAAmC,EAAKC,MAAxC,EAAQC,MAAR,EAAeC,kBAGiB,EAC9B,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAId,EAAKE,UAAS,SAAAN,GAAK,MAAK,CACtBC,OAAQD,EAAMC,MAAQ,GAAKD,EAAME,qBA1BlB,EA+BnBK,UAAY,WACN,EAAKP,MAAMQ,SAEbC,cAAc,EAAKC,OACnB,EAAKJ,SAAS,CACZE,SAAS,MAIX,EAAKE,MAAQC,YACX,EAAKZ,UACJ,GAAK,EAAKC,MAAMY,IAAO,KAE1B,EAAKN,SACH,CACEL,MAAO,EACPO,SAAS,GAGX,EAAKT,aAlDQ,EAuDnBc,gBAAkB,SAAAC,GAChB,IAAMF,EAAME,EAAMC,OAAOC,MAErB,EAAKhB,MAAMQ,SAEbC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKZ,UAAY,GAAKa,EAAO,KAGtD,EAAKN,SAAS,CACZL,MAAO,EACPW,SAIF,EAAKN,SAAS,CAAEM,SAnEhB,EAAKZ,MAAQ,CACTQ,SAAS,EACTP,MAAO,EACPW,IAAK,IACLV,gBAAiB,GAGrB,EAAKG,OAAS,IAAIY,MAAMZ,GACxB,EAAKF,OAAS,IAAIc,MAAMd,GAXT,E,0CA0ErB,WACE,MAAyBe,KAAKlB,MAAtBQ,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,IAEjB,OACE,sBAAKO,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,gCAAMP,EAAN,UACA,uBACAQ,KAAK,QACLC,IAAI,KACJC,IAAI,MAAMN,MAAOJ,EACjBW,SAAUL,KAAKL,qBAEf,wBAAQW,QAASN,KAAKX,UAAtB,SACCC,EAAU,OAAS,iB,GAzFNiB,aCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7be16f5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click1.07cda4b8.wav\";","export default __webpack_public_path__ + \"static/media/click2.5b5930c4.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playing: false,\n            count: 0,\n            bpm: 100,\n            beatsPerMeasure: 4\n        };\n        \n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n    }\n\n    playClick = () => {\n      const { count, beatsPerMeasure } = this.state;\n    \n      // The first beat will have a different sound than the others\n      if (count % beatsPerMeasure === 0) {\n        this.click2.play();\n      } else {\n        this.click1.play();\n      }\n    \n      // Keep track of which beat we're on\n      this.setState(state => ({\n        count: (state.count + 1) % state.beatsPerMeasure\n      }));\n    };\n    \n\n    startStop = () => {\n      if (this.state.playing) {\n        // Stop the timer\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      } else {\n        // Start a timer with the current BPM\n        this.timer = setInterval(\n          this.playClick,\n          (60 / this.state.bpm) * 1000\n        );\n        this.setState(\n          {\n            count: 0,\n            playing: true\n            // Play a click \"immediately\" (after setState finishes)\n          },\n          this.playClick\n        );\n      }\n    };\n\n    handleBpmChange = event => {\n      const bpm = event.target.value;\n    \n      if (this.state.playing) {\n        // Stop the old timer and start a new one\n        clearInterval(this.timer);\n        this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n    \n        // Set the new BPM, and reset the beat counter\n        this.setState({\n          count: 0,\n          bpm\n        });\n      } else {\n        // Otherwise just update the BPM\n        this.setState({ bpm });\n      }\n    };\n\n  render() {\n    const { playing, bpm } = this.state;\n\n    return (\n      <div className=\"metronome\">\n        <div className=\"bpm-slider\">\n          <div>{bpm} BPM</div>\n          <input \n          type=\"range\" \n          min=\"60\" \n          max=\"240\" value={bpm}\n          onChange={this.handleBpmChange}/>\n        </div>\n          <button onClick={this.startStop}>\n          {playing ? 'Stop' : 'Start'}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}